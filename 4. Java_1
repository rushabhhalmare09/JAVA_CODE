Topic(13 sessions)
==================
=> Need of Compiler vs Interpreter
=> Usage of identifiers,reserve words
=> Need of datatype in Java
=> Operators and Control statements
=> Arrays
=> Strings
=> JVM Architecture
=> OOps
=> Exceptionhandling
=> MultiThreading
=> Collections
=> JDK8 features
=> JDBC,Servlet,JSP
=> Hibernate
=> SpringBasics,SpringBoot and Microservices
Note:: DSA is requried only for product based companies(FANG,MANG,...highest 
package[1.8cr])
Compiler -> It is a software which takes sourcecode(HLL) as the input and generates
MLL code as the ouput
 To convert the HLL code to MLL code compiler will scan the HLL code 
only once.
Interpreter =>It is a software which takes sourcecode(HLL) as the input and 
generates MLL code as the ouput
 To convert the HLL code to MLL code interpreter will scan the HLL 
code mulitple times(depends on the instrcutions). 
Performance measurement of Compiler vs Interpreter
==================================================
 => Compiler will speed up the process ,where as intrpretter will slow down the 
process.
 => Compiler in one Scan will identify all the problems in the code(if 
found),where as interpretter will do scanning line by line so
 it takes more time for identifying the problem.
How does java program runs?
 => java program to run we need to set up the environment in our machines
 => To set up the environment we need to install JDK software to our machines.
 => JDK stands for Java Development kit, it provides libraries and the requried 
files to run our java programs
 => JDK :: JRE + JVM
 => JRE :: Java RunTimeEnvironment, It provides suitable environment to run our 
java program.
 => JVM :: Java Virtual Machine, It is responsible to run our java programs on the
basis of MultiThreading.
 
Program Execution
=================
 => java programs will be first compiled,to compile java program we need java 
compiler and java compiler will be installed when we install
 jdk software.
 => jdk software installation location :: c:\programfiles\jdk....
 => All the commands required for java developer to run his program would be 
present inside <java_home>\bin folder
 => bin folder
 |=> javac
 |=> java
 |=> javap
 |=> javadoc
 |=> jar
 => javaprogram would be first compiled(javac filename.java)
 => If the compilation is succesfull, it would generate .class file
 => These .class files will be used by jvm during the execution
 => .class file generated will have instructions in bytecode(neither HLL nor MLL).
 => bytecodes will be taken by JVM and it will be loaded inside JRE, then the 
execution begins.
Java programs => java compilation + Execution
 (javac) (java-> JIT) 
Rule followed while writing a java program
==========================================
 => In single source code,we can write only one class under public category
 => Which ever class is under public category,that class should hold main() and 
that classname should be saved as the filename.
 => Main method will be used by JVM during the execution, so java program expects 
the programmer to write main() in the following style
public static void main(String[] args)
What is an identifier?
 identifer is a name in java program.
 identifer can be classname,methodname,variablename,labelname.
eg::
class Demo
{
public static void main(String[] args)
{
int x = 10;
}
}
Demo: classname
main: methodName
String: className
args : variablename
x : variableName
What are the rules followed to define a java identifier?
 => The only character allowed for java identifiers is 
 => a to z, A to Z,0 to 9,$,_
 
Can identifier start with digits? No
Is there a restriction on the lenght of identifiers? No
We can't use reserve words as an identifer.
We can use inbuilt classnames and variablenames as identifiers,but it is not a good
practise to use.
eg::
public class Sample
{
public static void main(String[] args)
{
int String = 20;
System.out.println(String);//20
int Runnable= 25;
System.out.println(Runnable);//25
}
}
eg::
public class Sample
{
public static void main(String[] args)
{
int System = 20;
java.lang.System.out.println(System);
}
}
eg::
public class Sample
{
public static void main(String[] args)
{
int Thread = 20;
System.out.println(new Thread());
}
}
eg::
public class Sample
{
public static void main(String[] args)
{
int String = 10;
System.out.println(args.length);
}
}
----------
=========
----------
Data types
==========
In real world how many types of data we actually come cross?
 1. Number
a. Integral type
byte,short,int,long
b. Floating type
float,double
 2. Character
a. char
 3. Boolean type
a. boolean
 4. Images,audio,video
a. LOB's(Large Object)
What is the need of dataype is java langauge?
 => Every variable has a type,every expression has a type and all types are 
strictly defined,moreover every assignement
 should be checked by the compiler for type compatiblity, hence java langauge is
strictly typed programming language.
 => Since the language is strictly typed, we expect the programmer to specify the 
type of data we are keeping inside the
 variable.
 => To tell what type of data is kept inside the variable to the langauge, we need 
to tell through "DataType".
eg::
int a;
 int b = a+10;
Is java a dynamic programming language?
 => Java is dynamic programming language,because memory for the datatype is 
allocated by the JVM at the runtime.
int a = 10;
 |=> datatype(used by compiler to check for compatability)
 |=> During the execution of the program,jvm sees int, allocates 4 bytes of 
memory as per datatype specification
 and the value 10 will be stored inside 4bytes memory and for that 
4bytes memory name is assigned as "a".
Dynamically typed language
==========================
 a = 10;
 a ="sachin"
 a = 54.5;
 a = true;
eg:: python,javascript,php,......
datatypes
=========
byte => size :: 1bytes
 compatable value(range) :: -128 to +127
eg::
byte a = 10;
byte b = 20;
byte c = a+b;(byte+byte)//CompileTimeError
System.out.println(c);
short => size :: 2bytes
 range ::-32768 to +32767 
int => size :: 4bytes
 range :: -21474.... to +21474..... 
long(out of scope)
 => size :: 8bytes
 => remember this datatype is normally used when we work with file operations
float => size :: 4bytes
 => It is capable of holding the data of precession upto 5decimal places.
double => size :: 8bytes
 => It is capable of holding the data of precession upto 14 decimal places.
typecasting
==========

 byte(1)----> short(2)----> int(4)-----> long(8) ------> float(4) -------> 
double(8)
 ^
 |
 char(2)
long type of data how can it go and sit float datatype?
 => internal represenation of float datatype permits long datatype value to go and 
sit, so long values can accomdate in float 
 type also.
ClassRoom
 8 Benches ---> each bench -> 1 students ----> total students :: 8
ClassRoom
 4 Benches ---> each bench -> 2 students ----> total students :: 8
boolean and char datatypes
==========================
 In java langauge to store the datatype of character how many bytes are required?
 => In java langauge,we give 2 types to store a character.
 
 Why 2 bytes to store one character in java?
 => java language support i18N,so we need 2 bytes to store a character.
 => i18N stands for "Internationalization".
 => If we build an application in java, the same application through i18N can be 
communicated across the globe as per there 
 "LocalLanguage".
eg:: Amazon ----> english,hindi,kannada,tamil,telgu,.......
1 byte -> 8 bits ---> -128 to +127(only these many characters it can support 
basically english language ,followed by few symobls)
2 byte -> 16 bits --> more volume means more character support,.....
boolean datatypes
================

 => The only allowed values for boolean datatype is "true and false".
 => What is size of booelan datatype?
 Ans. The boolean datatype size is machine depenent can't be predicted.
 => MachineDependent
 if we install jvm of windows machine,mac machine,linux machine based on the 
architecutre of
 cpu, jvm will allocate the memory of that particular size for boolean type
variable.
 
eg::
public class Sample
{
public static void main(String[] args)
{
boolean a = 0;//CE
boolean b = 1;
System.out.println(a+b);
}
}
eg::
boolean b= 0;//CE
if (b)
System.out.println("sachin");
else
System.out.println("dhoni");

Snippets
========
Given code of Test.java file:
public class Test { 
 public static void main(String[] args){ 
 args[1] = "Day!";
 System.out.println(args[0] + " " + args[1]);
 }
}
And the commands:
javac Test.java
java Test Good
What is the result?
A. Good
B. Good Day!
C. Compilation Error
D. JVM would create a problem during execution
Answer: D ( Array size can't be increase at the runtime)
8. 
Consider below code of Test.java file:
public class Test { 
 public static void main(String[] args){ 
 System.out.println("Welcome " + args[0] +"!");
 }
}
And the commands:
javac Test.java
java Test "James Gosling" "Bill Joy"
What is the result?
A. Welcome James Gosling!
B. Welcome Bill Joy!
C. Welcome "James Gosling"!
D. Welcome "Bill Joy"!
E. Welcome James!
F. Welcome Gosling!
G. Welcome Bill!
H. Welcome Joy!
Answer: A
Consider below code of Test.java file:
public class Test {
 public static void main(String[] args) {
 boolean b1 = 0;
 boolean b2 = 1;
 System.out.println(b1 + b2);
 }
}
What is the result of compiling and executing Test class?
A. 0
B. 1
C. true
D. false
E. compilation error
Answer: E
10.
Given:
35. String #name = "Jane Doe";
36. int $age = 24;
37. Double _height = 123.5;
38. double ~temp = 37.5;
Which two statements are true? (Choose two.)
A. Line 35 will not compile.
B. Line 36 will not compile.
C. Line 37 will not compile.
D. Line 38 will not compile.
Answer: A and D
11.
What will be the result of compiling and executing Test class?
public class Test { 
 public static void main(String[] args){ 
 byte b1 = ( byte ) ( 127 + 21 ); 
 System.out.println(b1);
 }
}
A. 148
B. Compilation Error
C. -108
D. -128
Answer :: C [minRange + (value-MaxRange) - 1]
 [Reslut = -128 + 148 - 127-1]
 = -108
12.
class Test 
{
public static void main(String[] args) 
{
byte b[] = new byte[0];
System.out.println(b[0]);
}
}
A. NullPointerException
B. ArrayIndexOutOfBoundsException
C. Compilation Error
D. 0
Answer: B
13.
class Test 
{
public static void main(String[] args) 
{
System.out.println("Hello" + 1 + 2 + 3 + 4);
}
}
A. Hello1234
B. Hello9
C. Hello10
D. Hello 10
Answer: A
14.
class Test 
{
public static void main(String[] args) 
{
System.out.println("Hello" + (1 + 2 + 3 + 4));
}
}
A. Hello1234
B. Hello9
C. Hello10
D. Hello 10
Answer: C
15.
class Test 
{
public static void main(String[] args) 
{
String msg = "hello";
boolean flag[] =new boolean[1];//flag[0] = false
if (flag[0])
{
msg = "welcome";
}
System.out.println(msg);
}
}
A. ArrayIndexOutOfBoundsException
B. Welcome
C. hello
D. NullPointerException
Answer: C
16.
class Test 
{
public static void main(String[] args) 
{
String msg = "hello";
Boolean flag[] =new Boolean[1];//flag[0] = null
if (flag[0])
{
msg = "welcome";
}
System.out.println(msg);
}
}
A. ArrayIndexOutOfBoundsException
B. Welcome
C. hello
D. NullPointerException
E. CompileTimeError
F. None of the above
17.
Q>
class Fork {
public static void main(String[] args) {
if(args.length == 1 | args[1].equals("test")) {
System.out.println("test case");
} else {
System.out.println("production " + args[0]);
}
}
}
 And the command-line invocation:
 java Fork live2
args[0] = "live2";
args.length = 1
 What is the result?
 A. test case
 B. production live2
 C. test case live2
 D. Compilation fails
 E. An exception is thrown at runtime
Answer:: E(args[1] :: doesnot exists so problem at the runtime)
What is the difference b/w "||" and "|"?
 "||" => short circuit operator
 "|" => Bitwise operator
Tommo questions will be on :: Operator, control statements and oops concepts.


Operators
========
 1. increment and decrement operator
 2. arithmetic operator
 3. String concatination operators
 4. Relational operator
 5. Equality operator
 6. instance operator
 7. bitwise operator
 8. shortciruit operator
 9. typecast operator
 10. conditional operator
 11. assignement operator
increment
 a. pre-increment(y=++x)[increment and use]
 b. post-increment(y=x++)[use and increment]
decrement
 a. pre-decrement(y=--x)[decrement and use]
 b. post-decrement(y=x--)[use and decrement]
int x = 10;
y = ++x;(x = 11 , y =11)
y = x++;(x = 11 , y =10)
y = --x;(x = 9 , y =9)
y = x--;(x = 9 , y =10)
eg::
int x= 4;
int y=++x;
print x;//5
print y;//5
eg::
int x= 4;
int y=++4;//CE: increment can be applied only on variables not on direct literals.
print x;
print y;
eg::
int x= 4;
int y=++(++x);//CE: increment can be applied only on variables not on direct 
literals.
print x;
print y;
eg:: 
final int x = 4
print x;
Note:: We can use final access modifiers on
a. variable :: If we mark variable as final, the it would treated as 
"CompiletimeConstant"
 CompileTimeConstant -> value will be known to compiler and these
values should not be changed
 through out the program.
b. class :: If we mark class as final, the those classes would not 
participate in "inheritance".
c. method :: If we mark method as final, the those methods cannot be 
"Overriden".
eg::
boolean b = true;
 b++;//CE: ++ operator won't work w.r.t boolean types. 
print b;
What is the difference b/w b++ and b=b+1?
byte b = 5;
b++; //b = (byte)(b + 1); 
print b;//6
byte b = 5;
b = b+1;//CE
print b;

Q> 
class Test 
{
public static void main(String[] args) 
{
int a=100;
System.out.println(-a++);
}
}
A. -101
B. 99
c. Compilation error
d. -100
e. -99
Q>
class Test 
{
public static void main(String[] args) 
{
int a = 20;
int var= --a * a++ + a-- - --a;
System.out.println("a = " + a);
System.out.println("var = " + var);
}
}
A. 
 a = 18
 var=363
B. 
 a = 363
 var=363
C. Compilation Error
D.
 a = 25
var= 363
answer A
Q>
class Test 
{
public static void main(String[] args) 
{
int i = 5;
if (i++ < 6)
{
System.out.println(i++);
}
}
}
A. 5
B. 6
C. Program executes succesfully but nothing is printed on to console
D. 7
Answer: B


String concatination
====================
 => On String '+' operator is used for concatination
 => if one operand is String and other operand is other type like int,float,double 
then it perform concatination.
 => if both operands are of number type then only '+' operator performs "Addition".
 String a = "sachin";
 int b= 10,c=20,d=30;
 System.out.println(a+b+c+d);//sachin102030
 System.out.println(b+c+d+a);//60sachin
 System.out.println(b+c+a+d);//30sachin30
 System.out.println(b+a+c+d);//10sachin2030
 String a = "sachin";
 int b= 10,c=20,d=30;
 a=b+c+d;//CE
 print a;
 String a = "sachin";
 int b= 10,c=20,d=30;
 b=a+c+d;//CE
 print b;
 String a = "sachin";
 int b= 10,c=20,d=30;
 b=b+c+d;
 print b;//60
