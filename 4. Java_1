Topic(13 sessions)
==================
=> Need of Compiler vs Interpreter
=> Usage of identifiers,reserve words
=> Need of datatype in Java
=> Operators and Control statements
=> Arrays
=> Strings
=> JVM Architecture
=> OOps
=> Exceptionhandling
=> MultiThreading
=> Collections
=> JDK8 features
=> JDBC,Servlet,JSP
=> Hibernate
=> SpringBasics,SpringBoot and Microservices
Note:: DSA is requried only for product based companies(FANG,MANG,...highest 
package[1.8cr])
Compiler -> It is a software which takes sourcecode(HLL) as the input and generates
MLL code as the ouput
 To convert the HLL code to MLL code compiler will scan the HLL code 
only once.
Interpreter =>It is a software which takes sourcecode(HLL) as the input and 
generates MLL code as the ouput
 To convert the HLL code to MLL code interpreter will scan the HLL 
code mulitple times(depends on the instrcutions). 
Performance measurement of Compiler vs Interpreter
==================================================
 => Compiler will speed up the process ,where as intrpretter will slow down the 
process.
 => Compiler in one Scan will identify all the problems in the code(if 
found),where as interpretter will do scanning line by line so
 it takes more time for identifying the problem.
How does java program runs?
 => java program to run we need to set up the environment in our machines
 => To set up the environment we need to install JDK software to our machines.
 => JDK stands for Java Development kit, it provides libraries and the requried 
files to run our java programs
 => JDK :: JRE + JVM
 => JRE :: Java RunTimeEnvironment, It provides suitable environment to run our 
java program.
 => JVM :: Java Virtual Machine, It is responsible to run our java programs on the
basis of MultiThreading.
 
Program Execution
=================
 => java programs will be first compiled,to compile java program we need java 
compiler and java compiler will be installed when we install
 jdk software.
 => jdk software installation location :: c:\programfiles\jdk....
 => All the commands required for java developer to run his program would be 
present inside <java_home>\bin folder
 => bin folder
 |=> javac
 |=> java
 |=> javap
 |=> javadoc
 |=> jar
 => javaprogram would be first compiled(javac filename.java)
 => If the compilation is succesfull, it would generate .class file
 => These .class files will be used by jvm during the execution
 => .class file generated will have instructions in bytecode(neither HLL nor MLL).
 => bytecodes will be taken by JVM and it will be loaded inside JRE, then the 
execution begins.
Java programs => java compilation + Execution
 (javac) (java-> JIT) 
Rule followed while writing a java program
==========================================
 => In single source code,we can write only one class under public category
 => Which ever class is under public category,that class should hold main() and 
that classname should be saved as the filename.
 => Main method will be used by JVM during the execution, so java program expects 
the programmer to write main() in the following style
public static void main(String[] args)
What is an identifier?
 identifer is a name in java program.
 identifer can be classname,methodname,variablename,labelname.
eg::
class Demo
{
public static void main(String[] args)
{
int x = 10;
}
}
Demo: classname
main: methodName
String: className
args : variablename
x : variableName
What are the rules followed to define a java identifier?
 => The only character allowed for java identifiers is 
 => a to z, A to Z,0 to 9,$,_
 
Can identifier start with digits? No
Is there a restriction on the lenght of identifiers? No
We can't use reserve words as an identifer.
We can use inbuilt classnames and variablenames as identifiers,but it is not a good
practise to use.
eg::
public class Sample
{
public static void main(String[] args)
{
int String = 20;
System.out.println(String);//20
int Runnable= 25;
System.out.println(Runnable);//25
}
}
eg::
public class Sample
{
public static void main(String[] args)
{
int System = 20;
java.lang.System.out.println(System);
}
}
eg::
public class Sample
{
public static void main(String[] args)
{
int Thread = 20;
System.out.println(new Thread());
}
}
eg::
public class Sample
{
public static void main(String[] args)
{
int String = 10;
System.out.println(args.length);
}
}
