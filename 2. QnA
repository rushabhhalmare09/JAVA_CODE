Assignment:1 - https://pwskills.notion.site/Assignment-Questions-1-b751804a6d904ec59b5ce98cb8a252c4


Q1.vWhat is the difference between Compiler and Interpreter

* The differences between Compiler and Interpreter are as follows:

1.
A compiler is a software program which is used to compile the source code which is in (High Level Language) as an input at once and translates it into the Lower Level Language in (byte code or MLL) like in java it will translate to byte code (.class file) and then that byte code is given to JVM which has JIT compiler and at runtime it will translate to native machine code and during the compilation process if any errors exists it will show all that error after the compilation is over.

Whereas, Interpreter is also a software program which is used to check and execute the code line by line and if in any particular line error is found then it will stop the execution there and we need to do the corrections and then interpreter starts again checking from the start.


2.
Compiler will take less time compare to Interpreter because when we compile a source code the compiler at once compiles the code and prompt us with all the  errors that may exist in that code  at once also if compiler compiled the code successfully recompilation in future is not needed (which saves our time) as in terms of java the byte code which has been generated by compiler(javac) can be given to JVM for translating into MLL and thus executing the program.

Whereas, Interpreter will take more time as it will check and execute the source code(HLL) line by line and if any error occurs it halts there and the programmer needs to fix the error then Interpreter starts scanning from the start again (which consumes more time).


__________________________________________________________________________________________________________________________________________________


Q2. What is the difference between JDK, JRE, and JVM?

* The differences between JDK, JRE and JVM are as follows:

JDK (Java Development Kit): The JDK is used for Java application development. It includes tools such as the Java compiler (javac) for compiling Java source code into bytecode, the Java debugger (jdb) for debugging, and various libraries for different functionalities. It provides all the necessary tools and resources needed to develop Java applications.

JRE (Java Runtime Environment): The JRE is a runtime environment required to run Java applications. It includes the JVM (Java Virtual Machine), which interprets and executes Java bytecode. The JRE also provides necessary runtime libraries and resources needed for the execution of Java applications. It does not include development tools like compilers or debuggers.

JVM (Java Virtual Machine): The JVM is a virtual machine that executes Java bytecode. It is responsible for interpreting the bytecode and executing it on the underlying hardware or operating system. The JVM also includes a Just-In-Time (JIT) compiler, which dynamically compiles parts of the bytecode into native machine code for improved performance during runtime.


___________________________________________________________________________________________________________________________________________________



Q3. How many types of memory areas are allocated by JVM?

1) Method Area: It contains the class structures, method information and class variables(a.k.a static variables).
2) Java Stack: It contains the local variables, method parameters and arguments , return addresses and the computation results. Each thread in java has its own Stack.
3) Heap: It provides Dynamic memory to store objects in Heap memory(run-time data memory) where objects are created during the execution of program. It is created when we use new keyword. Heap is a shared memory area accessible to all the Threads runnimg within JVM.
4) PC Register: It hold the address of the currently executing JVM instruction. Pc register also called as Instruction pointer which keeps tracks of the currenlty executing JVM instruction and points to the next instruction to be executed by JVM. It also helps in handle the program flow. It also helps in management of exception handling when an error occurs 	by determining the approprite Exception handler to execute based on the current instruction pointer.
5) Native Method stack: The Native Method Stack is a dedicated memory area within the JVM for executing native methods. It provides separate stack frames and local variable storage for native code, allowing it to interface with the JVM and access system resources outside the Java environment.

___________________________________________________________________________________________________________________________________________________


Q4. What is JIT compiler?

JIT stands for Just-in-time compiler which is a component of JVM. JIT compiler in the JVM works alongside the interpreter to dynamically analyze, optimize, and compile hot spots(frequently executed portions of code) of the code into native machine code. This optimization process enhances the execution speed of the Java program.

__________________________________________________________________________________________________________________________________________________


Q5. What are the various access specifiers in Java?

1) Public:    Accessible from any class or package
2) Protected: Accessible within the same package and subclasses
3) Default:   Accessible within the same package
4) Private:   Accessible only within the same class

* These access specifiers help enforce encapsulation and control the visibility and accessibility of class members.
_________________________________________________________________________________________________________________________________________________


Q6.What is a compiler in Java?

The compiler in Java, such as the javac compiler, converts high-level Java source code into bytecode, which is an intermediate representation of the program. The bytecode is then executed by the JVM, which may further optimize it using a JIT compiler.

                                
________________________________________________________________________________________________________________________________________________
Q6.What is a compiler in Java?

The compiler in Java, such as the javac compiler, converts high-level Java source code into bytecode, which is an intermediate representation of the program. The bytecode is then executed by the JVM, which may further optimize it using a JIT compiler.

_________________________________________________________________________________________________________________________________________________

Q7. Explain the types of variables in Java?

Types of variables in java:

Local Variables: Local variables are declared within a method or block, have limited scope, and hold temporary values for the duration of the block's execution.

Instance Variables: Instance variables are declared within a class, each instance of the class has its own copy, they hold values associated with the object's state, and exist as long as the object exists.

Class Variables: Class variables are declared with the static keyword, associated with the class itself rather than instances, shared among all instances of the class, and retain their values throughout the program's execution.

Parameters: Parameters are declared in method or constructor signatures, receive values passed during invocation, behave like local variables within the method or constructor, and have scope limited to the respective method or constructor.

________________________________________________________________________________________________________________________________________________

Q8. What are the Datatypes in Java?

There are two types of Datatypes in Java:
1) Primitive Datatypes (built-in dtattype)
- byte: 1 byte
- short: 8 byte
- int: 32bit
- char: 2 byte
- long: 8 byte
- float: 4 byte
- double: 8 byte
- boolean: True or False

2) Non-primitive (Reference Data Types):

- class: A reference to an object of a class.
- interface: A reference to an interface type.
- array: A reference to an array object.
- enum: A reference to an enumerated type.
- String: A sequence of characters

________________________________________________________________________________________________________________________________________________


Q9. What are the identifiers in java?

- identifer is a name in java program.
- identifer can be classname,methodname,variablename,labelname.

Eg:

class Demo
{
  public static void main(String[] args)
  {
    int x = 10;
  }
}


Demo: classname
main: methodName
String: className
args : variablename
x : variableName

Note: The only character allowed for java identifiers is a to z, A to Z, 0 to 9, $, _

________________________________________________________________________________________________________________________________________________

Q10. Explain the architecture of JVM 


- Class Loader Subsystem: Loads Java class files into memory from various sources.

- Runtime Data Areas: Includes the method area, heap, Java stack, and PC register to store class-level data, objects, method frames, and execution information.

- Execution Engine: Interprets bytecode or dynamically compiles it to native code using a JIT compiler for efficient execution.

- Garbage Collector: Manages memory by reclaiming unused objects in the heap through automatic garbage collection.

- Native Method Interface (JNI): Enables interaction between Java code and native code written in other languages.

These components work together to provide platform independence, memory management, bytecode interpretation/compilation, and integration with native code in the JVM.


=============================

Assignment-2: https://pwskills.notion.site/Assignment-Questions-2-7a8614badb9945afba95ee7f1041c571


Q1. What are the Conditional Operators in Java?


In Java, there are several conditional operators used for making decisions and performing conditional evaluations.

1) Equality Operators:
   == Checks for equality between two values.
   != Checks for inequality between two values.

2. Relational Operators:
   < Checks if the left operand is less than the right operand.
   > Checks if the left operand is greater than the right operand.
   < Checks if the left operand is less than or equal to the right operand.
   > Checks if the left operand is greater than or equal to the right operand.
   >=, <= 

3. Conditional Operators:
   && (Logical AND): Performs a conditional AND operation.
   || (Logical OR): Performs a conditional OR operation.

4. Ternary Operator:
   ? : Evaluates a condition and returns one of two expressions based on the condition.
   Ex: (2>4) ? "yes" : "false"; //output: false

________________________________________________________________________________________________________________________________________________

Q2. What are the types of operators based on the number of operands?

1) Unary Operator:
-Unary operators work with a single operand.

-Examples include unary plus (+), unary minus (-), increment (++), decrement (--), logical complement (!), and bitwise complement (~).
Binary Operators:

2) Binary Operator: 
- Binary operators work with two operands.

- Examples include arithmetic operators (+, -, *, /, %), relational operators (>, <, >=, <=, ==, !=), logical operators (&&, ||), and assignment operators (=, +=, -=, *=, /=, %=).

3) Ternary Operator:
- The ternary operator is the only operator that takes three operands.

-It is represented as "condition ? expression1 : expression2" and is used for making decisions based on a condition.

_______________________________________________________________________________________________________________________________________________

Q3.What is the use of Switch case in Java programming?

The switch case statement in Java is used to control program flow based on multiple possible values of a variable. It provides a concise and efficient way to handle different cases, improving code readability and maintainability by avoiding repetitive if-else statements.

_______________________________________________________________________________________________________________________________________________


Q4.What are the conditional Statements and use of conditional statements in Java?

There are 3 types of conditional Statements:

1) if statement: It evaluates a condition and executes a block of code if the condition is true. If the condition is false, the code block is skipped.

2) if-else statement: It extends the if statement by providing an alternative block of code to execute when the condition is false. If the condition is true, the if block is executed; otherwise, the else block is execute

3) switch case: It allows for multiple branching based on different values of a variable or expression. It compares the value of the variable against different case labels and executes the corresponding block of code.

_______________________________________________________________________________________________________________________________________________


Q5.What is the syntax of if else statement?

if(boolean condition){
   //body
}
else{
}

* It True if block will be executed or False then else block will be executed.
_______________________________________________________________________________________________________________________________________________
